<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="StartPhoto.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>